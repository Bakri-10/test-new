name: 'Create MS SQL Failover Group'
run-name: ${{ github.actor }}
on:
  workflow_call:
    inputs:
      name:
        type: string
        required: false
      subscription:
        type: string
        required: true
      database_names:
        type: string
        required: true
      location:
        type: string
        required: true
      secondary_location:
        type: string
        required: true
      environment:
        type: string
        required: true
      purpose:
        type: string
        required: true
      purpose_rg:
        type: string
        required: true
      requestType:
        type: string
        required: true
    secrets:
      ARM_CLIENT_ID:
        required: true
      ARM_CLIENT_SECRET:
        required: true
      ARM_SUBSCRIPTION_ID:
        required: true
      ARM_TENANT_ID:
        required: true
      BACKEND_STORAGE_ACCOUNT:
        required: true
      BACKEND_RESOURCE_GROUP:
        required: true
env:
  permissions:
  contents: read
jobs:
  mssql-failover-deployment:
    name: 'Deploying - MSSQL Failover Group'
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ROOT_PATH: 'Azure/${{ inputs.name }}'
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    defaults:
      run:
        shell: bash
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: latest

    - name: 'Terraform Initialize'
      run: terraform init -backend-config="resource_group_name=$BACKEND_RESOURCE_GROUP" -backend-config="storage_account_name=$BACKEND_STORAGE_ACCOUNT" -backend-config="container_name=terraform-state" -backend-config="key=${{ inputs.environment }}-${{ inputs.purpose }}-sqlfailover.tfstate" -input=false

    - id: envvars
      name: Set environment variables based on deployment environment
      run: |
        if [ "${{ inputs.environment }}" = "PROD" ]; then
          echo "BACKEND_STORAGE_ACCOUNT=${{ secrets.PROD_BACKEND_STORAGE_ACCOUNT }}" >> "$GITHUB_ENV"
          echo "BACKEND_RESOURCE_GROUP=${{ secrets.PROD_BACKEND_RESOURCE_GROUP }}" >> "$GITHUB_ENV"
        elif [ "${{ inputs.environment }}" = "UAT" ]; then
          echo "BACKEND_STORAGE_ACCOUNT=${{ secrets.UAT_BACKEND_STORAGE_ACCOUNT }}" >> "$GITHUB_ENV"
          echo "BACKEND_RESOURCE_GROUP=${{ secrets.UAT_BACKEND_RESOURCE_GROUP }}" >> "$GITHUB_ENV"
        else 
          echo "BACKEND_STORAGE_ACCOUNT=${{ secrets.DEV_BACKEND_STORAGE_ACCOUNT }}" >> "$GITHUB_ENV"
          echo "BACKEND_RESOURCE_GROUP=${{ secrets.DEV_BACKEND_RESOURCE_GROUP }}" >> "$GITHUB_ENV"
        fi

    - name: 'Terraform Plan'
      if: ${{ inputs.requestType == 'Create' }}
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_version: latest
        tf_actions_subcommand: 'plan'
        tf_actions_working_dir: ${{ env.ROOT_PATH }}
      env:
        TF_VAR_database_names: ${{ inputs.database_names }}
        TF_VAR_location: ${{ inputs.location }}
        TF_VAR_secondary_location: ${{ inputs.secondary_location }}
        TF_VAR_environment: ${{ inputs.environment }}
        TF_VAR_purpose: ${{ inputs.purpose }}
        TF_VAR_purpose_rg: ${{ inputs.purpose_rg }}
        TF_VAR_BACKEND_STORAGE_ACCOUNT: '${{secrets.BACKEND_STORAGE_ACCOUNT}}'
        TF_VAR_BACKEND_RESOURCE_GROUP: '${{secrets.BACKEND_RESOURCE_GROUP}}'

    - name: Terraform Destroy
      if: ${{ inputs.requestType == 'Remove' }}
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_version: latest
        tf_actions_subcommand: 'destroy'
        tf_actions_working_dir: ${{ env.ROOT_PATH }}
      env:
        TF_VAR_database_names: ${{ inputs.database_names }}
        TF_VAR_location: ${{ inputs.location }}
        TF_VAR_secondary_location: ${{ inputs.secondary_location }}
        TF_VAR_environment: ${{ inputs.environment }}
        TF_VAR_purpose: ${{ inputs.purpose }}
        TF_VAR_purpose_rg: ${{ inputs.purpose_rg }}
        TF_VAR_BACKEND_STORAGE_ACCOUNT: '${{secrets.BACKEND_STORAGE_ACCOUNT}}'
        TF_VAR_BACKEND_RESOURCE_GROUP: '${{secrets.BACKEND_RESOURCE_GROUP}}'

    - name: Terraform Apply
      if: ${{ inputs.requestType == 'Create' }}
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_version: latest
        tf_actions_subcommand: 'apply'
        tf_actions_working_dir: ${{ env.ROOT_PATH }}
      env:
        TF_VAR_database_names: ${{ inputs.database_names }}
        TF_VAR_location: ${{ inputs.location }}
        TF_VAR_secondary_location: ${{ inputs.secondary_location }}
        TF_VAR_environment: ${{ inputs.environment }}
        TF_VAR_purpose: ${{ inputs.purpose }}
        TF_VAR_purpose_rg: ${{ inputs.purpose_rg }}
        TF_VAR_BACKEND_STORAGE_ACCOUNT: '${{secrets.BACKEND_STORAGE_ACCOUNT}}'
        TF_VAR_BACKEND_RESOURCE_GROUP: '${{secrets.BACKEND_RESOURCE_GROUP}}'
