name: 'zWindows VM (Call)'
run-name: '${{github.actor}} - Creating Windows VM'
on:
  workflow_call:
    inputs:
      requestType:
        type: string
        required: false
      environment:
        type: string
        required: true
      location:
        type: string
        required: false
      vmsize:
        type: string
        required: false
      purpose:
        type: string
        required: false
      purposeRG:
        type: string
        required: false
      projectou:
        type: string
        required: false
      subnetInfo:
        type: string
        required: true
        description: JSON formatted array containing subnet names
        default: '["subnet1","subnet2"]'
      diskSizeGB:
        type: string
        required: false
      diskStorageAccountType:
        type: string
        required: false
    secrets:
      AZURE_CLIENT_ID:
        required: true
      AZURE_CLIENT_SECRET:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true
      AZURE_TENANT_ID:
        required: true

env:
  permissions:
  contents: read
jobs:
  wvm-create:
    name: 'Create Windows VM'
    env:
      ARM_CLIENT_ID: ${{secrets.AZURE_CLIENT_ID}}
      ARM_CLIENT_SECRET: ${{secrets.AZURE_CLIENT_SECRET}}
      ARM_TENANT_ID: ${{secrets.AZURE_TENANT_ID}}
      ARM_SUBSCRIPTION_ID: ${{secrets.AZURE_SUBSCRIPTION_ID}}
      ROOT_PATH: 'Azure/windows-vm'
    runs-on:
    - aks-runners
    - ${{inputs.environment}}
    environment: ${{inputs.environment}}
    defaults:
      run:
        shell: bash
        working-directory: 'Azure/windows-vm'
    steps:
    - name: 'Checkout - Windows VM (${{ inputs.purpose }})'
      uses: actions/checkout@v3
    - name: 'Setup Node.js'
      uses: actions/setup-node@v2
      with:
        node-version: '20' # Specify the required Node.js version  
    - name: 'Setup Terraform'
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: latest
    - id: envvars
      name: Set environment variables based on deployment environment
      run: |
        if [ "${{ inputs.environment }}" = "prod" ]; then
          echo "BACKEND_STORAGE_ACCOUNT=${{ vars.BACKEND_STORAGE_ACCOUNT }}" >> "$GITHUB_ENV"
          echo "BACKEND_RESOURCE_GROUP=${{ vars.BACKEND_RESOURCE_GROUP }}" >> "$GITHUB_ENV"
        elif [ "${{ inputs.environment }}" = "uat" ]; then
          echo "BACKEND_STORAGE_ACCOUNT=${{ vars.BACKEND_STORAGE_ACCOUNT }}" >> "$GITHUB_ENV"
          echo "BACKEND_RESOURCE_GROUP=${{ vars.BACKEND_RESOURCE_GROUP }}" >> "$GITHUB_ENV"
        else
          echo "BACKEND_STORAGE_ACCOUNT=${{ vars.BACKEND_STORAGE_ACCOUNT }}" >> "$GITHUB_ENV"
          echo "BACKEND_RESOURCE_GROUP=${{ vars.BACKEND_RESOURCE_GROUP }}" >> "$GITHUB_ENV"
        fi
    - name: Azure Login
      uses: azure/login@v2
      with:
        creds: '{"clientId":"${{ secrets.AZURE_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'
        enable-AzPSSession: false
    - name: Debug Environment Information
      run: |
        echo "Environment: ${{ inputs.environment }}"
        echo "Subscription ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}"
        echo "Backend Resource Group: ${{ vars.BACKEND_RESOURCE_GROUP }}"
        echo "Backend Storage Account: ${{ vars.BACKEND_STORAGE_ACCOUNT }}"

        # Verify storage account exists in this subscription
        echo "Checking if storage account exists in this subscription..."
        az storage account show --name ${{ vars.BACKEND_STORAGE_ACCOUNT }} --resource-group ${{ vars.BACKEND_RESOURCE_GROUP }} || {
          echo "WARNING: Storage account ${{ vars.BACKEND_STORAGE_ACCOUNT }} either doesn't exist in this subscription or you don't have permission to view it."
          echo "Make sure the correct storage account is configured for this environment: ${{ inputs.environment }}"
        }
    - name: Parse Subnet Names
      id: parse_subnets
      run: |
        # Remove brackets and quotes, split by comma
        SUBNET_LIST=$(echo ${{inputs.subnetInfo}} | tr -d '[]"' | tr ',' '\n' | jq -R . | jq -s .)
        # Get first and second subnet names
        SUBNET1=$(echo $SUBNET_LIST | jq -r '.[0] // empty')
        SUBNET2=$(echo $SUBNET_LIST | jq -r '.[1] // empty')
        echo "subnet1=${SUBNET1}" >> $GITHUB_OUTPUT
        echo "subnet2=${SUBNET2}" >> $GITHUB_OUTPUT
    - name: Set VM size for Terraform
      id: set_vmsize
      run: |
        if [ "${{ inputs.requestType }}" = "Update VM SKU" ]; then
          echo "TF_VM_SIZE=${{ inputs.vmsize }}" >> $GITHUB_ENV
        else
          echo "TF_VM_SIZE=same" >> $GITHUB_ENV
        fi
    - name: 'Terraform Initialize'
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_version: latest
        tf_actions_subcommand: 'init'
        tf_actions_working_dir: ${{env.ROOT_PATH}}
        tf_actions_comment: true
      env:
        TF_VAR_request_type: '${{inputs.requestType}}'
        TF_VAR_location: '${{inputs.location}}'
        TF_VAR_vm_size: '${{inputs.vmsize}}'
        TF_VAR_purpose: '${{inputs.purpose}}'
        TF_VAR_purpose_rg: '${{inputs.purposeRG}}'
        TF_VAR_project_ou: '${{inputs.projectou}}'
        TF_VAR_subnetname_wvm: '${{ steps.parse_subnets.outputs.subnet1 }}'
        TF_VAR_subnetname_wvm2: '${{ steps.parse_subnets.outputs.subnet2 }}'
        TF_VAR_disk_size_gb: '${{inputs.diskSizeGB}}'
        TF_VAR_disk_storage_account_type: '${{inputs.diskStorageAccountType}}'
        TF_CLI_ARGS_init: '-backend-config="resource_group_name=${{ vars.BACKEND_RESOURCE_GROUP }}" -backend-config="storage_account_name=${{ vars.BACKEND_STORAGE_ACCOUNT }}" -backend-config="container_name=terraform-state" -backend-config="key=${{ inputs.environment }}-${{ inputs.purpose }}-terraform.tfstate"'
    - name: 'Terraform Plan - Windows VM (${{ inputs.purpose }})'
      if: ${{ inputs.requestType == 'Create (with New RG)' || inputs.requestType == 'Create (with Existing RG)' }}
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_version: latest
        tf_actions_subcommand: 'plan'
        tf_actions_working_dir: ${{env.ROOT_PATH}}
        tf_actions_comment: true
      env:
        TF_VAR_request_type: '${{inputs.requestType}}'
        TF_VAR_location: '${{inputs.location}}'
        TF_VAR_vm_size: '${{ env.TF_VM_SIZE }}'
        TF_VAR_purpose: '${{inputs.purpose}}'
        TF_VAR_purpose_rg: '${{inputs.purposeRG}}'
        TF_VAR_project_ou: '${{inputs.projectou}}'
        TF_VAR_subnetname_wvm: '${{ steps.parse_subnets.outputs.subnet1 }}'
        TF_VAR_subnetname_wvm2: '${{ steps.parse_subnets.outputs.subnet2 }}'
        TF_VAR_disk_size_gb: '${{inputs.diskSizeGB}}'
        TF_VAR_disk_storage_account_type: '${{inputs.diskStorageAccountType}}'
        TF_VAR_BACKEND_STORAGE_ACCOUNT: '${{vars.BACKEND_STORAGE_ACCOUNT}}'
        TF_VAR_BACKEND_RESOURCE_GROUP: '${{vars.BACKEND_RESOURCE_GROUP}}'
    - name: 'Apply - Windows VM (${{ inputs.purpose }})'
      if: ${{ inputs.requestType == 'Create (with New RG)' || inputs.requestType == 'Create (with Existing RG)' }}
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_version: latest
        tf_actions_subcommand: 'apply'
        tf_actions_working_dir: ${{env.ROOT_PATH}}
        tf_actions_comment: true
      env:
        TF_VAR_request_type: '${{inputs.requestType}}'
        TF_VAR_location: '${{inputs.location}}'
        TF_VAR_vm_size: '${{ env.TF_VM_SIZE }}'
        TF_VAR_purpose: '${{inputs.purpose}}'
        TF_VAR_purpose_rg: '${{inputs.purposeRG}}'
        TF_VAR_project_ou: '${{inputs.projectou}}'
        TF_VAR_subnetname_wvm: '${{ steps.parse_subnets.outputs.subnet1 }}'
        TF_VAR_subnetname_wvm2: '${{ steps.parse_subnets.outputs.subnet2 }}'
        TF_VAR_disk_size_gb: '${{inputs.diskSizeGB}}'
        TF_VAR_disk_storage_account_type: '${{inputs.diskStorageAccountType}}'
        TF_VAR_BACKEND_STORAGE_ACCOUNT: '${{vars.BACKEND_STORAGE_ACCOUNT}}'
        TF_VAR_BACKEND_RESOURCE_GROUP: '${{vars.BACKEND_RESOURCE_GROUP}}'
    - name: 'Terraform Destroy - Windows VM (${{ inputs.purpose }})'
      if: ${{ inputs.requestType == 'Remove (Destroy VM)' }}
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_version: latest
        tf_actions_subcommand: 'destroy'
        tf_actions_working_dir: ${{env.ROOT_PATH}}
        tf_actions_comment: true
        tf_actions_cli_options: '-auto-approve'
      env:
        TF_VAR_request_type: '${{inputs.requestType}}'
        TF_VAR_location: '${{inputs.location}}'
        TF_VAR_vm_size: '${{ env.TF_VM_SIZE }}'
        TF_VAR_purpose: '${{inputs.purpose}}'
        TF_VAR_purpose_rg: '${{inputs.purposeRG}}'
        TF_VAR_project_ou: '${{inputs.projectou}}'
        TF_VAR_subnetname_wvm: '${{ steps.parse_subnets.outputs.subnet1 }}'
        TF_VAR_subnetname_wvm2: '${{ steps.parse_subnets.outputs.subnet2 }}'
        TF_VAR_disk_size_gb: '${{inputs.diskSizeGB}}'
        TF_VAR_disk_storage_account_type: '${{inputs.diskStorageAccountType}}'
        TF_VAR_BACKEND_STORAGE_ACCOUNT: '${{vars.BACKEND_STORAGE_ACCOUNT}}'
        TF_VAR_BACKEND_RESOURCE_GROUP: '${{vars.BACKEND_RESOURCE_GROUP}}'
