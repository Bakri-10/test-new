name: 'zWindows VM (Call)'
run-name: '${{github.actor}} - Creating Windows VM'
on:
  workflow_call:
    inputs:
      requestType:
        type: string
        required: false
      environment:
        type: string
        required: true
      location:
        type: string
        required: false
      vmsize:
        type: string
        required: false
      purpose:
        type: string
        required: false
      purposeRG:
        type: string
        required: false
      projectou:
        type: string
        required: false
      subnetInfo:
        type: string
        required: true
        description: JSON formatted array containing subnet names
        default: '["subnet1","subnet2"]'
      diskSizeGB:
        type: string
        required: false
      diskStorageAccountType:
        type: string
        required: false
    secrets:
      ARM_CLIENT_ID:
        required: true
      ARM_CLIENT_SECRET:
        required: true
      ARM_SUBSCRIPTION_ID:
        required: true
      ARM_TENANT_ID:
        required: true
      BACKEND_STORAGE_ACCOUNT:
        required: true
      BACKEND_RESOURCE_GROUP:
        required: true
env:
  permissions:
  contents: read
jobs:
  wvm-create:
    name: 'Create Windows VM'
    env:
      ARM_CLIENT_ID: ${{secrets.ARM_CLIENT_ID}}
      ARM_CLIENT_SECRET: ${{secrets.ARM_CLIENT_SECRET}}
      ARM_TENANT_ID: ${{secrets.ARM_TENANT_ID}}
      ARM_SUBSCRIPTION_ID: ${{secrets.ARM_SUBSCRIPTION_ID}}
      ROOT_PATH: 'Azure/windows-vm'
    runs-on:
      group: aks-runners
    environment: ${{inputs.environment}}
    defaults:
      run:
        shell: bash
        working-directory: 'Azure/windows-vm'
    steps:
    - name: 'Checkout - Windows VM (${{ inputs.purpose }})'
      uses: actions/checkout@v3
    - name: 'Setup Node.js'
      uses: actions/setup-node@v2
      with:
        node-version: '20' # Specify the required Node.js version  
    - name: 'Setup Terraform'
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: latest
    - id: envvars
      name: Set environment variables based on deployment environment
      run: |
        if [ "${{ inputs.environment }}" = "prod" ]; then
          echo "BACKEND_STORAGE_ACCOUNT=${{ secrets.BACKEND_STORAGE_ACCOUNT }}" >> "$GITHUB_ENV"
          echo "BACKEND_RESOURCE_GROUP=${{ secrets.BACKEND_RESOURCE_GROUP }}" >> "$GITHUB_ENV"
        elif [ "${{ inputs.environment }}" = "uat" ]; then
          echo "BACKEND_STORAGE_ACCOUNT=${{ secrets.BACKEND_STORAGE_ACCOUNT }}" >> "$GITHUB_ENV"
          echo "BACKEND_RESOURCE_GROUP=${{ secrets.BACKEND_RESOURCE_GROUP }}" >> "$GITHUB_ENV"
        else
          echo "BACKEND_STORAGE_ACCOUNT=${{ secrets.BACKEND_STORAGE_ACCOUNT }}" >> "$GITHUB_ENV"
          echo "BACKEND_RESOURCE_GROUP=${{ secrets.BACKEND_RESOURCE_GROUP }}" >> "$GITHUB_ENV"
        fi
    - name: Debug Environment Variables
      run: |
        echo "BACKEND_STORAGE_ACCOUNT=$BACKEND_STORAGE_ACCOUNT"
        echo "BACKEND_RESOURCE_GROUP=$BACKEND_RESOURCE_GROUP" 
    - name: Parse Subnet Names
      id: parse_subnets
      run: |
        # Remove brackets and quotes, split by comma
        SUBNET_LIST=$(echo ${{inputs.subnetInfo}} | tr -d '[]"' | tr ',' '\n' | jq -R . | jq -s .)
        # Get first and second subnet names
        SUBNET1=$(echo $SUBNET_LIST | jq -r '.[0] // empty')
        SUBNET2=$(echo $SUBNET_LIST | jq -r '.[1] // empty')
        echo "subnet1=${SUBNET1}" >> $GITHUB_OUTPUT
        echo "subnet2=${SUBNET2}" >> $GITHUB_OUTPUT
    - name: Terraform Initialize
      run: |
        # Generate VM name for state file using the same pattern as in Terraform
        if [[ "${{ inputs.purpose }}" == *"-"* ]]; then
          # For existing VMs with hyphen in the name
          VM_NAME_FOR_STATE="${{ inputs.purpose }}"
        else
          # For new VMs, construct the name
          if [[ "${{ inputs.purpose }}" == *"/"* ]]; then
            VM_ROLE=$(echo "${{ inputs.purpose }}" | cut -d'/' -f1)
            VM_SEQUENCE=$(echo "${{ inputs.purpose }}" | cut -d'/' -f2)
          else
            VM_ROLE="${{ inputs.purpose }}"
            VM_SEQUENCE="nnn"
          fi
          
          # Map location to code
          case "${{ inputs.location }}" in
            "eastus2") LOCATION_CODE="EUS2" ;;
            "uksouth") LOCATION_CODE="UKS" ;;
            "centralus") LOCATION_CODE="CUS" ;;
            "ukwest") LOCATION_CODE="UKW" ;;
            *) LOCATION_CODE="LOC" ;;
          esac
          
          # Map environment to code
          case "${{ inputs.environment }}" in
            "DEV") ENV_CODE="D" ;;
            "UAT") ENV_CODE="U" ;;
            "QA") ENV_CODE="Q" ;;
            "PROD") ENV_CODE="P" ;;
            *) ENV_CODE="X" ;;
          esac
          
          VM_NAME_FOR_STATE="AZ${LOCATION_CODE}-${VM_ROLE}${ENV_CODE}${VM_SEQUENCE}"
        fi

        # Convert to uppercase for consistency
        VM_NAME_FOR_STATE=$(echo "$VM_NAME_FOR_STATE" | tr '[:lower:]' '[:upper:]')
        echo "Generated VM name for state file: $VM_NAME_FOR_STATE"

        # Initialize Terraform with the generated VM name in the state file
        terraform init -backend-config="resource_group_name=$BACKEND_RESOURCE_GROUP" -backend-config="storage_account_name=$BACKEND_STORAGE_ACCOUNT" -backend-config="container_name=terraform-state" -backend-config="key=vm-${{ inputs.environment }}-${VM_NAME_FOR_STATE}-terraform.tfstate" -input=false
      env:
        TF_VAR_request_type: '${{inputs.requestType}}'
        TF_VAR_location: '${{inputs.location}}'
        TF_VAR_vm_size: '${{inputs.vmsize}}'
        TF_VAR_purpose: '${{inputs.purpose}}'
        TF_VAR_purpose_rg: '${{inputs.purposeRG}}'
        TF_VAR_project_ou: '${{inputs.projectou}}'
        TF_VAR_subnetname_wvm: '${{ steps.parse_subnets.outputs.subnet1 }}'
        TF_VAR_subnetname_wvm2: '${{ steps.parse_subnets.outputs.subnet2 }}'
        TF_VAR_disk_size_gb: '${{inputs.diskSizeGB}}'
        TF_VAR_disk_storage_account_type: '${{inputs.diskStorageAccountType}}'
        TF_VAR_BACKEND_STORAGE_ACCOUNT: '${{secrets.BACKEND_STORAGE_ACCOUNT}}'
        TF_VAR_BACKEND_RESOURCE_GROUP: '${{secrets.BACKEND_RESOURCE_GROUP}}'
    - name: 'Terraform Plan - Windows VM (${{ inputs.purpose }})'
      if: ${{ inputs.requestType == 'Create (with New RG)' || inputs.requestType == 'Create (with Existing RG)' }}
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_version: latest
        tf_actions_subcommand: 'plan'
        tf_actions_working_dir: ${{env.ROOT_PATH}}
        tf_actions_comment: true
      env:
        TF_VAR_request_type: '${{inputs.requestType}}'
        TF_VAR_location: '${{inputs.location}}'
        TF_VAR_vm_size: '${{inputs.vmsize}}'
        TF_VAR_purpose: '${{inputs.purpose}}'
        TF_VAR_purpose_rg: '${{inputs.purposeRG}}'
        TF_VAR_project_ou: '${{inputs.projectou}}'
        TF_VAR_subnetname_wvm: '${{ steps.parse_subnets.outputs.subnet1 }}'
        TF_VAR_subnetname_wvm2: '${{ steps.parse_subnets.outputs.subnet2 }}'
        TF_VAR_disk_size_gb: '${{inputs.diskSizeGB}}'
        TF_VAR_disk_storage_account_type: '${{inputs.diskStorageAccountType}}'
        TF_VAR_BACKEND_STORAGE_ACCOUNT: '${{secrets.BACKEND_STORAGE_ACCOUNT}}'
        TF_VAR_BACKEND_RESOURCE_GROUP: '${{secrets.BACKEND_RESOURCE_GROUP}}'
    - name: 'Apply - Windows VM (${{ inputs.purpose }})'
      if: ${{ inputs.requestType == 'Create (with New RG)' || inputs.requestType == 'Create (with Existing RG)' }}
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_version: latest
        tf_actions_subcommand: 'apply'
        tf_actions_working_dir: ${{env.ROOT_PATH}}
        tf_actions_comment: true
      env:
        TF_VAR_request_type: '${{inputs.requestType}}'
        TF_VAR_location: '${{inputs.location}}'
        TF_VAR_vm_size: '${{inputs.vmsize}}'
        TF_VAR_purpose: '${{inputs.purpose}}'
        TF_VAR_purpose_rg: '${{inputs.purposeRG}}'
        TF_VAR_project_ou: '${{inputs.projectou}}'
        TF_VAR_subnetname_wvm: '${{ steps.parse_subnets.outputs.subnet1 }}'
        TF_VAR_subnetname_wvm2: '${{ steps.parse_subnets.outputs.subnet2 }}'
        TF_VAR_disk_size_gb: '${{inputs.diskSizeGB}}'
        TF_VAR_disk_storage_account_type: '${{inputs.diskStorageAccountType}}'
        TF_VAR_BACKEND_STORAGE_ACCOUNT: '${{secrets.BACKEND_STORAGE_ACCOUNT}}'
        TF_VAR_BACKEND_RESOURCE_GROUP: '${{secrets.BACKEND_RESOURCE_GROUP}}'
    - name: 'Terraform Destroy - Windows VM (${{ inputs.purpose }})'
      if: ${{ inputs.requestType == 'Remove (Destroy VM)' }}
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_version: latest
        tf_actions_subcommand: 'destroy'
        tf_actions_working_dir: ${{env.ROOT_PATH}}
        tf_actions_comment: true
        tf_actions_cli_options: '-auto-approve'
      env:
        TF_VAR_request_type: '${{inputs.requestType}}'
        TF_VAR_location: '${{inputs.location}}'
        TF_VAR_vm_size: '${{inputs.vmsize}}'
        TF_VAR_purpose: '${{inputs.purpose}}'
        TF_VAR_purpose_rg: '${{inputs.purposeRG}}'
        TF_VAR_project_ou: '${{inputs.projectou}}'
        TF_VAR_subnetname_wvm: '${{ steps.parse_subnets.outputs.subnet1 }}'
        TF_VAR_subnetname_wvm2: '${{ steps.parse_subnets.outputs.subnet2 }}'
        TF_VAR_disk_size_gb: '${{inputs.diskSizeGB}}'
        TF_VAR_disk_storage_account_type: '${{inputs.diskStorageAccountType}}'
        TF_VAR_BACKEND_STORAGE_ACCOUNT: '${{secrets.BACKEND_STORAGE_ACCOUNT}}'
        TF_VAR_BACKEND_RESOURCE_GROUP: '${{secrets.BACKEND_RESOURCE_GROUP}}'
