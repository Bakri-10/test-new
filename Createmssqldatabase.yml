name: 'Create MS SQL Database'
run-name: ${{github.actor}}
on:
  workflow_call:
    inputs:
      name:
        type: string
        required: false
      location:
        type: string
        required: true
      environment:
        type: string
        required: true
      purpose:
        type: string
        required: true
      db_names:
        type: string
        required: true
      purposeRG:
        type: string
        required: true
      skuname:
        type: string
        required: true
      zoneredundancy:
        type: string
        required: false
      dbcollation:
        type: string
        required: false
    secrets:
      ARM_CLIENT_ID:
        required: true
      ARM_CLIENT_SECRET:
        required: true
      ARM_SUBSCRIPTION_ID:
        required: true
      ARM_TENANT_ID:
        required: true
      BACKEND_STORAGE_ACCOUNT:
        required: true
      BACKEND_RESOURCE_GROUP:
        required: true
env:
  permissions:
  contents: read
jobs:
  mssql-database-deployment:
    env:
      ARM_CLIENT_ID: ${{secrets.ARM_CLIENT_ID}}
      ARM_CLIENT_SECRET: ${{secrets.ARM_CLIENT_SECRET}}
      ARM_TENANT_ID: ${{secrets.ARM_TENANT_ID}}
      ARM_SUBSCRIPTION_ID: ${{secrets.ARM_SUBSCRIPTION_ID}}
      ROOT_PATH: 'Azure/${{inputs.name}}'
      name: 'Deploying - MSSQL Database'
    runs-on: ubuntu-latest
    environment: ${{inputs.environment}}
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - id: envvars
      name: Set environment variables based on deployment environment
      run: |
        if [ "${{ inputs.environment }}" = "prod" ]; then
          echo "BACKEND_STORAGE_ACCOUNT=${{ secrets.BACKEND_STORAGE_ACCOUNT }}" >> "$GITHUB_ENV"
          echo "BACKEND_RESOURCE_GROUP=${{ secrets.BACKEND_RESOURCE_GROUP }}" >> "$GITHUB_ENV"
        elif [ "${{ inputs.environment }}" = "uat" ]; then
          echo "BACKEND_STORAGE_ACCOUNT=${{ secrets.BACKEND_STORAGE_ACCOUNT }}" >> "$GITHUB_ENV"
          echo "BACKEND_RESOURCE_GROUP=${{ secrets.BACKEND_RESOURCE_GROUP }}" >> "$GITHUB_ENV"
        else
          echo "BACKEND_STORAGE_ACCOUNT=${{ secrets.BACKEND_STORAGE_ACCOUNT }}" >> "$GITHUB_ENV"
          echo "BACKEND_RESOURCE_GROUP=${{ secrets.BACKEND_RESOURCE_GROUP }}" >> "$GITHUB_ENV"
        fi

    - name: Debug Environment Variables
      run: |
        echo "BACKEND_STORAGE_ACCOUNT=$BACKEND_STORAGE_ACCOUNT"
        echo "BACKEND_RESOURCE_GROUP=$BACKEND_RESOURCE_GROUP"

    - name: Terraform Initialize
      run: |
        terraform init \
          -backend-config="resource_group_name=$BACKEND_RESOURCE_GROUP" \
          -backend-config="storage_account_name=$BACKEND_STORAGE_ACCOUNT" \
          -backend-config="container_name=terraform-state" \
          -backend-config="key=${{ inputs.environment }}-${{ inputs.purpose }}-terraform.tfstate" \
          -input=false
      working-directory: ${{env.ROOT_PATH}}

    - name: Terraform Plan
      if: ${{ inputs.requestType == 'Create' }}
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_version: latest
        tf_actions_subcommand: 'plan'
        tf_actions_working_dir: ${{env.ROOT_PATH}}
      env:
        TF_VAR_location: ${{inputs.location}}
        TF_VAR_environment: ${{inputs.environment}}
        TF_VAR_purpose: ${{inputs.purpose}}
        TF_VAR_purpose_rg: ${{inputs.purposeRG}}
        TF_VAR_db_purpose: ${{inputs.db_names}}
        TF_VAR_skuname: ${{inputs.skuname}}
        TF_VAR_zoneredundancy: ${{inputs.zoneredundancy}}
        TF_VAR_dbcollation: '${{inputs.dbcollation}}'

    - name: Terraform Plan Destroy
      if: ${{ inputs.requestType == 'Remove' }}
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_version: latest
        tf_actions_subcommand: 'destroy'
        tf_actions_working_dir: ${{env.ROOT_PATH}}
        tf_actions_comment: true
      env:
        TF_VAR_location: ${{inputs.location}}
        TF_VAR_environment: ${{inputs.environment}}
        TF_VAR_purpose: ${{inputs.purpose}}
        TF_VAR_purpose_rg: ${{inputs.purposeRG}}
        TF_VAR_db_purpose: ${{inputs.db_names}}
        TF_VAR_skuname: ${{inputs.skuname}}
        TF_VAR_zoneredundancy: ${{inputs.zoneredundancy}}
        TF_VAR_dbcollation: '${{inputs.dbcollation}}'

    - name: Terraform Apply
      if: ${{ inputs.requestType == 'Create' }}
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_version: latest
        tf_actions_subcommand: 'apply'
        tf_actions_working_dir: ${{env.ROOT_PATH}}
        tf_actions_comment: true
      env:
        TF_VAR_location: ${{inputs.location}}
        TF_VAR_environment: ${{inputs.environment}}
        TF_VAR_purpose: ${{inputs.purpose}}
        TF_VAR_purpose_rg: ${{inputs.purposeRG}}
        TF_VAR_db_purpose: ${{inputs.db_names}}
        TF_VAR_skuname: ${{inputs.skuname}}
        TF_VAR_zoneredundancy: ${{inputs.zoneredundancy}}
        TF_VAR_dbcollation: '${{inputs.dbcollation}}'
