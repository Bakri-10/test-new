name: 'zWindows VM Maintain (Call)'
run-name: '${{github.actor}} - Maintain Windows VM'
on:
  workflow_call:
    inputs:
      requestType:
        type: string
        required: true
      environment:
        type: string
        required: true
      location:
        type: string
        required: false
      vmsize:
        type: string
        required: false
      purpose:
        type: string
        required: false
      purposeRG:
        type: string
        required: false
      diskSizeGB:
        type: string
        required: false
      diskStorageAccountType:
        type: string
        required: false
    secrets:
      ARM_CLIENT_ID:
        required: true
      ARM_CLIENT_SECRET:
        required: true
      ARM_SUBSCRIPTION_ID:
        required: true
      ARM_TENANT_ID:
        required: true
      BACKEND_STORAGE_ACCOUNT:
        required: true
      BACKEND_RESOURCE_GROUP:
        required: true

permissions:
  contents: read

jobs:
  wvm-maintain:
    name: 'Maintain Windows VM'
    env:
      ARM_CLIENT_ID: ${{secrets.ARM_CLIENT_ID}}
      ARM_CLIENT_SECRET: ${{secrets.ARM_CLIENT_SECRET}}
      ARM_TENANT_ID: ${{secrets.ARM_TENANT_ID}}
      ARM_SUBSCRIPTION_ID: ${{secrets.ARM_SUBSCRIPTION_ID}}
      ROOT_PATH: 'Azure/windows-vm/update'
    runs-on: ubuntu-latest
    environment: ${{inputs.environment}}
    defaults:
      run:
        shell: bash
    steps:
    - uses: actions/checkout@v3

    - name: Az login
      uses: azure/login@v2
      with:
        creds: '{"clientId":"${{ secrets.ARM_CLIENT_ID }}","clientSecret":"${{ secrets.ARM_CLIENT_SECRET }}","subscriptionId":"${{ secrets.ARM_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.ARM_TENANT_ID }}"}'
        enable-AzPSSession: true

    - name: Generate VM Name for State File
      run: |
        # Generate VM name for state file using the same pattern as in Terraform
        if [[ "${{ inputs.purpose }}" == *"-"* ]]; then
          # For existing VMs with hyphen in the name
          VM_NAME_FOR_STATE="${{ inputs.purpose }}"
        else
          # For new VMs, construct the name
          if [[ "${{ inputs.purpose }}" == *"/"* ]]; then
            VM_ROLE=$(echo "${{ inputs.purpose }}" | cut -d'/' -f1)
            VM_SEQUENCE=$(echo "${{ inputs.purpose }}" | cut -d'/' -f2)
          else
            VM_ROLE="${{ inputs.purpose }}"
            VM_SEQUENCE="nnn"
          fi
          
          # Map location to code
          case "${{ inputs.location }}" in
            "eastus2") LOCATION_CODE="EUS2" ;;
            "uksouth") LOCATION_CODE="UKS" ;;
            "centralus") LOCATION_CODE="CUS" ;;
            "ukwest") LOCATION_CODE="UKW" ;;
            *) LOCATION_CODE="LOC" ;;
          esac
          
          # Map environment to code
          case "${{ inputs.environment }}" in
            "DEV") ENV_CODE="D" ;;
            "UAT") ENV_CODE="U" ;;
            "QA") ENV_CODE="Q" ;;
            "PROD") ENV_CODE="P" ;;
            *) ENV_CODE="X" ;;
          esac
          
          VM_NAME_FOR_STATE="AZ${LOCATION_CODE}-${VM_ROLE}${ENV_CODE}${VM_SEQUENCE}"
        fi

        # Convert to uppercase for consistency
        VM_NAME_FOR_STATE=$(echo "$VM_NAME_FOR_STATE" | tr '[:lower:]' '[:upper:]')
        echo "Generated VM name for state file: $VM_NAME_FOR_STATE"
        echo "VM_NAME_FOR_STATE=$VM_NAME_FOR_STATE" >> $GITHUB_ENV

    - name: 'Terraform Initialize'
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_version: latest
        tf_actions_subcommand: 'init'
        tf_actions_working_dir: ${{env.ROOT_PATH}}
        tf_actions_comment: true
      env:
        TF_VAR_request_type: '${{inputs.requestType}}'
        TF_VAR_location: '${{inputs.location}}'
        TF_VAR_vm_size: '${{inputs.vmsize}}'
        TF_VAR_purpose: '${{inputs.purpose}}'
        TF_VAR_purpose_rg: '${{inputs.purposeRG}}'
        TF_VAR_disk_size_gb: '${{inputs.diskSizeGB}}'
        TF_VAR_disk_storage_account_type: '${{inputs.diskStorageAccountType}}'
        TF_CLI_ARGS_init: '-backend-config="resource_group_name=${{ secrets.BACKEND_RESOURCE_GROUP }}" -backend-config="storage_account_name=${{ secrets.BACKEND_STORAGE_ACCOUNT }}" -backend-config="container_name=terraform-state" -backend-config="key=vm-${{ inputs.environment }}-${{ env.VM_NAME_FOR_STATE }}-terraform.tfstate"'

    - name: 'Terraform Plan'
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_version: latest
        tf_actions_subcommand: 'plan'
        tf_actions_working_dir: ${{env.ROOT_PATH}}
        tf_actions_comment: true
        tf_actions_cli_options: >-
          ${{ inputs.requestType == 'Update VM SKU' && '-target="azapi_update_resource.vm_vmSize"' ||
              inputs.requestType == 'Update (Data Disk)' && '-target="azapi_update_resource.dd_*"' ||
              inputs.requestType == 'Update (OS Disk)' && '-target="azapi_update_resource.vm_os_storage_account_type"' ||
              inputs.requestType == 'Start VM' && '-target="azapi_resource_action.vm_start[0]"' ||
              inputs.requestType == 'Stop VM' && '-target="azapi_resource_action.vm_stop[0]"' ||
              inputs.requestType == 'Restart VM' && '-target="azapi_resource_action.vm_restart_stop[0]" -target="time_sleep.wait_30_seconds[0]" -target="azapi_resource_action.vm_restart_start[0]"' || '' }}
      env:
        TF_VAR_request_type: '${{inputs.requestType}}'
        TF_VAR_location: '${{inputs.location}}'
        TF_VAR_vm_size: '${{inputs.vmsize}}'
        TF_VAR_purpose: '${{inputs.purpose}}'
        TF_VAR_purpose_rg: '${{inputs.purposeRG}}'
        TF_VAR_disk_size_gb: '${{inputs.diskSizeGB}}'
        TF_VAR_disk_storage_account_type: '${{inputs.diskStorageAccountType}}'

    - name: 'Terraform Apply'
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_version: latest
        tf_actions_subcommand: 'apply'
        tf_actions_working_dir: ${{env.ROOT_PATH}}
        tf_actions_comment: true
        tf_actions_cli_options: >-
          ${{ inputs.requestType == 'Update VM SKU' && '-target="azapi_update_resource.vm_vmSize"' ||
              inputs.requestType == 'Update (Data Disk)' && '-target="azapi_update_resource.dd_*"' ||
              inputs.requestType == 'Update (OS Disk)' && '-target="azapi_update_resource.vm_os_storage_account_type"' ||
              inputs.requestType == 'Start VM' && '-target="azapi_resource_action.vm_start[0]"' ||
              inputs.requestType == 'Stop VM' && '-target="azapi_resource_action.vm_stop[0]"' ||
              inputs.requestType == 'Restart VM' && '-target="azapi_resource_action.vm_restart_stop[0]" -target="time_sleep.wait_30_seconds[0]" -target="azapi_resource_action.vm_restart_start[0]"' || '' }}
      env:
        TF_VAR_request_type: '${{inputs.requestType}}'
        TF_VAR_location: '${{inputs.location}}'
        TF_VAR_vm_size: '${{inputs.vmsize}}'
        TF_VAR_purpose: '${{inputs.purpose}}'
        TF_VAR_purpose_rg: '${{inputs.purposeRG}}'
        TF_VAR_disk_size_gb: '${{inputs.diskSizeGB}}'
        TF_VAR_disk_storage_account_type: '${{inputs.diskStorageAccountType}}'
