name: 'zWindows VM Maintain (Call)'
run-name: '${{github.actor}} - Maintain Windows VM'
on:
  workflow_call:
    inputs:
      requestType:
        type: string
        required: true
      environment:
        type: string
        required: true
      location:
        type: string
        required: false
      vmsize:
        type: string
        required: false
      purpose:
        type: string
        required: false
      purposeRG:
        type: string
        required: false
      diskSizeGB:
        type: string
        required: false
      diskStorageAccountType:
        type: string
        required: false
    secrets:
      AZURE_CLIENT_ID:
        required: true
      AZURE_CLIENT_SECRET:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true
      AZURE_TENANT_ID:
        required: true

permissions:
  contents: read

jobs:
  wvm-maintain:
    name: 'Maintain Windows VM'
    env:
      ARM_CLIENT_ID: ${{secrets.AZURE_CLIENT_ID}}
      ARM_CLIENT_SECRET: ${{secrets.AZURE_CLIENT_SECRET}}
      ARM_TENANT_ID: ${{secrets.AZURE_TENANT_ID}}
      ARM_SUBSCRIPTION_ID: ${{secrets.AZURE_SUBSCRIPTION_ID}}
      ROOT_PATH: 'Azure/windows-vm/update'
    runs-on:
      group: aks-runners
      environment: ${{inputs.environment}}
    environment: ${{inputs.environment}}
    defaults:
      run:
        shell: bash
    steps:
    - uses: actions/checkout@v3

    - name: Az login
      uses: azure/login@v2
      with:
        creds: '{"clientId":"${{ secrets.AZURE_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'
        enable-AzPSSession: false

    - name: Debug Environment Information
      run: |
        echo "Environment: ${{ inputs.environment }}"
        echo "Subscription ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}"
        echo "Backend Resource Group: ${{ vars.BACKEND_RESOURCE_GROUP }}"
        echo "Backend Storage Account: ${{ vars.BACKEND_STORAGE_ACCOUNT }}"

        # Verify storage account exists in this subscription
        echo "Checking if storage account exists in this subscription..."
        az storage account show --name ${{ vars.BACKEND_STORAGE_ACCOUNT }} --resource-group ${{ vars.BACKEND_RESOURCE_GROUP }} || {
          echo "WARNING: Storage account ${{ vars.BACKEND_STORAGE_ACCOUNT }} either doesn't exist in this subscription or you don't have permission to view it."
          echo "Make sure the correct storage account is configured for this environment: ${{ inputs.environment }}"
        }

    - name: 'Terraform Initialize'
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_version: latest
        tf_actions_subcommand: 'init'
        tf_actions_working_dir: ${{env.ROOT_PATH}}
        tf_actions_comment: true
      env:
        TF_VAR_request_type: '${{inputs.requestType}}'
        TF_VAR_location: '${{inputs.location}}'
        TF_VAR_vm_size: '${{inputs.vmsize}}'
        TF_VAR_purpose: '${{inputs.purpose}}'
        TF_VAR_purpose_rg: '${{inputs.purposeRG}}'
        TF_VAR_disk_size_gb: '${{inputs.diskSizeGB}}'
        TF_VAR_disk_storage_account_type: '${{inputs.diskStorageAccountType}}'
        TF_CLI_ARGS_init: '-backend-config="resource_group_name=${{ vars.BACKEND_RESOURCE_GROUP }}" -backend-config="storage_account_name=${{ vars.BACKEND_STORAGE_ACCOUNT }}" -backend-config="container_name=terraform-state" -backend-config="key=${{ inputs.environment }}-${{ inputs.purpose }}-maintain.tfstate"'

    - name: 'Terraform Plan'
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_version: latest
        tf_actions_subcommand: 'plan'
        tf_actions_working_dir: ${{env.ROOT_PATH}}
        tf_actions_comment: true
        tf_actions_cli_options: >-
          ${{ inputs.requestType == 'Update VM SKU' && '-target="azapi_update_resource.vm_vmSize"' ||
              inputs.requestType == 'Update (Data Disk)' && '-target="azapi_update_resource.dd_*"' ||
              inputs.requestType == 'Update (OS Disk)' && '-target="azapi_update_resource.vm_os_storage_account_type"' ||
              inputs.requestType == 'Start VM' && '-target="azapi_resource_action.vm_start[0]"' ||
              inputs.requestType == 'Stop VM' && '-target="azapi_resource_action.vm_stop[0]"' ||
              inputs.requestType == 'Restart VM' && '-target="azapi_resource_action.vm_restart_stop[0]" -target="time_sleep.wait_30_seconds[0]" -target="azapi_resource_action.vm_restart_start[0]"' || '' }}
      env:
        TF_VAR_request_type: '${{inputs.requestType}}'
        TF_VAR_location: '${{inputs.location}}'
        TF_VAR_vm_size: '${{inputs.vmsize}}'
        TF_VAR_purpose: '${{inputs.purpose}}'
        TF_VAR_purpose_rg: '${{inputs.purposeRG}}'
        TF_VAR_disk_size_gb: '${{inputs.diskSizeGB}}'
        TF_VAR_disk_storage_account_type: '${{inputs.diskStorageAccountType}}'

    - name: 'Terraform Apply'
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_version: latest
        tf_actions_subcommand: 'apply'
        tf_actions_working_dir: ${{env.ROOT_PATH}}
        tf_actions_comment: true
        tf_actions_cli_options: >-
          ${{ inputs.requestType == 'Update VM SKU' && '-target="azapi_update_resource.vm_vmSize"' ||
              inputs.requestType == 'Update (Data Disk)' && '-target="azapi_update_resource.dd_*"' ||
              inputs.requestType == 'Update (OS Disk)' && '-target="azapi_update_resource.vm_os_storage_account_type"' ||
              inputs.requestType == 'Start VM' && '-target="azapi_resource_action.vm_start[0]"' ||
              inputs.requestType == 'Stop VM' && '-target="azapi_resource_action.vm_stop[0]"' ||
              inputs.requestType == 'Restart VM' && '-target="azapi_resource_action.vm_restart_stop[0]" -target="time_sleep.wait_30_seconds[0]" -target="azapi_resource_action.vm_restart_start[0]"' || '' }}
      env:
        TF_VAR_request_type: '${{inputs.requestType}}'
        TF_VAR_location: '${{inputs.location}}'
        TF_VAR_vm_size: '${{inputs.vmsize}}'
        TF_VAR_purpose: '${{inputs.purpose}}'
        TF_VAR_purpose_rg: '${{inputs.purposeRG}}'
        TF_VAR_disk_size_gb: '${{inputs.diskSizeGB}}'
        TF_VAR_disk_storage_account_type: '${{inputs.diskStorageAccountType}}'
