name: '- Deploy Windows VM'
run-name: 'Windows VM - ${{inputs.environment}} purpose: ${{inputs.purpose}} : ${{inputs.requesttype}}'
on:
  workflow_dispatch:
    inputs:
      requesttype:
        type: choice
        required: true
        description: Request Type
        options:
        - Create (with New RG)
        - Create (with Existing RG)
        - Update (Data Disk)
        - Update (OS Disk)
        - Update VM SKU
        - Remove (Destroy VM)
        - Start VM
        - Stop VM
        - Restart VM
        - Install Network Watcher Agent
        - Remove Network Watcher Agent
        default: "Create (with New RG)"
      environment:
        type: choice
        required: true
        description: Environment
        options:
        - DEV
        - UAT
        - QA
        - PROD
      location:
        type: choice
        required: true
        description: Deployment Location
        options:
        - Select the location
        - eastus2
        - uksouth
        - centralus
        - ukwest
      vmsize:
        type: string
        required: true
        default: "Standard_D2s_v3"
        description: VM Size (SKU Designation)
      purpose:
        type: string
        required: true
        description: Role/Sequence for VM (RRRR/SSS). Hyphen designate an existing VM
      purposeRG:
        type: string
        required: true
        description: Resource Group Purpose. Format options - 1) Simple string for default naming 2) Hyphen-separated name to use existing RG 3) BU/Purpose format to override business unit (e.g. ari/sgs)
      projectou:
        type: string
        required: true
        description: Ignored on Update............. Organizational Unit (OU) for Domain Join.
      subnetInfo:
        type: string
        required: true
        description: JSON formatted array containing subnet names
        default: '["subnet1","subnet2"]'
      diskSizeGB:
        type: string
        required: false
        description: Disk Size in GB................. Data Disk on Create............. Update specifies Data or OS Disk. On Update use "Same" retain size.
        default: "32"
      diskStorageAccountType:
        type: choice
        required: false
        description: Disk Storage Account Type....... Data Disk on Create............. Update specifies Data or OS Disk. Blank on Update to retain size.
        options:
        - Standard_LRS
        - StandardSSD_LRS
        - StandardSSD_ZRS
        - Premium_LRS
        - Premium_ZRS
        - " "

jobs:
  parse_subnet_info:
    runs-on:
      group: aks-runners
    environment: ${{inputs.environment}}
    outputs:
      subnetNameWVM: ${{ steps.parse.outputs.subnetNameWVM }}
      subnetNameWVM2: ${{ steps.parse.outputs.subnetNameWVM2 }}
    steps:
    - name: Parse Subnet Information
      id: parse
      run: |
        echo "subnetNameWVM=$(echo '${{ inputs.subnetInfo }}' | jq -r '.subnetNameWVM')" >> $GITHUB_ENV
        echo "subnetNameWVM2=$(echo '${{ inputs.subnetInfo }}' | jq -r '.subnetNameWVM2')" >> $GITHUB_ENV
        echo "::set-output name=subnetNameWVM::$(echo '${{ inputs.subnetInfo }}' | jq -r '.subnetNameWVM')"
        echo "::set-output name=subnetNameWVM2::$(echo '${{ inputs.subnetInfo }}' | jq -r '.subnetNameWVM2')"

  # resource_group:
  #   if: (github.event.inputs.requestType == 'Create (with New RG)')
  #   needs: parse_subnet_info
  #   name: 'Resource Group ${{inputs.purposeRG}}'
  #   uses: ./.github/workflows/CreateResourceGroup.yml
  #   secrets:
  #     AZURE_CLIENT_ID: ${{secrets.AZURE_CLIENT_ID}}
  #     AZURE_CLIENT_SECRET: ${{secrets.AZURE_CLIENT_SECRET}}
  #     AZURE_SUBSCRIPTION_ID: ${{secrets.AZURE_SUBSCRIPTION_ID}}
  #     AZURE_TENANT_ID: ${{secrets.AZURE_TENANT_ID}}
  #   with:
  #     name: 'resource-group'
  #     subscription: 'SNow Input'
  #     environment: '${{inputs.environment}}'
  #     location: '${{inputs.location}}'
  #     purpose: '${{inputs.purposeRG}}'

  windows_vm_new_rg:
    if: (github.event.inputs.requestType == 'Create (with New RG)')
    name: 'Windows VM ${{inputs.purpose}}'
    uses: ./.github/workflows/WindowsVMCreate.yml
    needs: parse_subnet_info
    secrets:
      AZURE_CLIENT_ID: ${{secrets.AZURE_CLIENT_ID}}
      AZURE_CLIENT_SECRET: ${{secrets.AZURE_CLIENT_SECRET}}
      AZURE_SUBSCRIPTION_ID: ${{secrets.AZURE_SUBSCRIPTION_ID}}
      AZURE_TENANT_ID: ${{secrets.AZURE_TENANT_ID}}
    with:
      requestType: '${{inputs.requestType}}'
      environment: '${{inputs.environment}}'
      location: '${{inputs.location}}'
      vmsize: '${{inputs.vmsize}}'
      purpose: '${{inputs.purpose}}'
      purposeRG: '${{inputs.purposeRG}}'
      projectou: '${{inputs.projectou}}'
      subnetInfo: '${{inputs.subnetInfo}}'
      diskSizeGB: '${{inputs.diskSizeGB}}'
      diskStorageAccountType: '${{inputs.diskStorageAccountType}}'

  windows_vm_existing_rg:
    if: (github.event.inputs.requestType == 'Create (with Existing RG)')
    name: 'Windows VM ${{inputs.purpose}}'
    uses: ./.github/workflows/WindowsVMCreate.yml
    needs: parse_subnet_info
    secrets:
      AZURE_CLIENT_ID: ${{secrets.AZURE_CLIENT_ID}}
      AZURE_CLIENT_SECRET: ${{secrets.AZURE_CLIENT_SECRET}}
      AZURE_SUBSCRIPTION_ID: ${{secrets.AZURE_SUBSCRIPTION_ID}}
      AZURE_TENANT_ID: ${{secrets.AZURE_TENANT_ID}}
    with:
      requestType: '${{inputs.requestType}}'
      environment: '${{inputs.environment}}'
      location: '${{inputs.location}}'
      vmsize: '${{inputs.vmsize}}'
      purpose: '${{inputs.purpose}}'
      purposeRG: '${{inputs.purposeRG}}'
      projectou: '${{inputs.projectou}}'
      subnetInfo: '${{inputs.subnetInfo}}'
      diskSizeGB: '${{inputs.diskSizeGB}}'
      diskStorageAccountType: '${{inputs.diskStorageAccountType}}'

  windows_vm_maintain:
    if: (github.event.inputs.requestType == 'Update (Data Disk)' || github.event.inputs.requestType == 'Update (OS Disk)' || github.event.inputs.requestType == 'Update VM SKU' || github.event.inputs.requestType == 'Start VM' || github.event.inputs.requestType == 'Stop VM' || github.event.inputs.requestType == 'Restart VM' || github.event.inputs.requestType == 'Install Network Watcher Agent' || github.event.inputs.requestType == 'Remove Network Watcher Agent')
    name: 'Maintain Windows VM ${{inputs.purpose}}'
    uses: ./.github/workflows/WindowsVMMaintain.yml
    needs: parse_subnet_info
    secrets:
      AZURE_CLIENT_ID: ${{secrets.AZURE_CLIENT_ID}}
      AZURE_CLIENT_SECRET: ${{secrets.AZURE_CLIENT_SECRET}}
      AZURE_SUBSCRIPTION_ID: ${{secrets.AZURE_SUBSCRIPTION_ID}}
      AZURE_TENANT_ID: ${{secrets.AZURE_TENANT_ID}}
    with:
      requestType: '${{inputs.requestType}}'
      environment: '${{inputs.environment}}'
      location: '${{inputs.location}}'
      vmsize: '${{inputs.vmsize}}'
      purpose: '${{inputs.purpose}}'
      purposeRG: '${{inputs.purposeRG}}'
      diskSizeGB: '${{inputs.diskSizeGB}}'
      diskStorageAccountType: '${{inputs.diskStorageAccountType}}'

  windows_vm_remove:
    if: (github.event.inputs.requestType == 'Remove (Destroy VM)')
    name: 'Windows VM ${{ inputs.purpose }}'
    uses: ./.github/workflows/WindowsVMCreate.yml
    needs: parse_subnet_info
    secrets:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
    with:
      requestType: '${{ inputs.requestType }}'
      environment: '${{ inputs.environment }}'
      location: '${{ inputs.location }}'
      vmsize: '${{ inputs.vmsize }}'
      purpose: '${{ inputs.purpose }}'
      purposeRG: '${{ inputs.purposeRG }}'
      projectou: '${{ inputs.projectou }}'
      subnetInfo: '${{inputs.subnetInfo}}'
      diskSizeGB: '${{ inputs.diskSizeGB }}'
      diskStorageAccountType: '${{ inputs.diskStorageAccountType }}'
