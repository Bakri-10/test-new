name: 'zLoad Balancer (Call)'
run-name: '${{github.actor}} - Creating Load Balancer'
on:
  workflow_call:
    inputs:
      requestType:
        type: string
        required: false
      location:
        type: string
        required: true
      environment:
        type: string
        required: true
      purpose:
        type: string
        required: false
      purposeRG:
        type: string
        required: false
      subnetname:
        type: string
        required: false
      sku_name:
        type: string
        required: false
      private_ip_address:
        type: string
        required: false
      nic_names:
        type: string
        required: false
      lb_probe_protocol:
        type: string
        required: false
      lb_probe_port:
        type: string
        required: false
      lb_rule_tcp_protocol:
        type: string
        required: false 
      lb_rule_tcp_frontend_port:
          type: string
          required: false
      lb_rule_tcp_backend_port:
        type: string
        required: false
      lb_rule_https_protocol:
        type: string
        required: false
      lb_rule_https_frontend_port:
        type: string
        required: false
env:
  permissions:
  contents: read
jobs:
  lb-create:
    name: 'Create Azure Load Balancer'
    env:
      ARM_CLIENT_ID:        ${{secrets.AZURE_CLIENT_ID}}
      ARM_CLIENT_SECRET:    ${{secrets.AZURE_CLIENT_SECRET}}
      ARM_TENANT_ID:        ${{secrets.AZURE_TENANT_ID}}
      ARM_SUBSCRIPTION_ID:  ${{secrets.AZURE_SUBSCRIPTION_ID}}
      ROOT_PATH:            'Azure/Azure-LB'
    runs-on: 
      group: aks-runners
    environment: ${{ inputs.environment }}
    defaults:
      run:
        shell: bash
        working-directory: 'Azure/Azure-LB'
    steps:
      - name: 'Checkout - Load Balancer'
        uses: actions/checkout@v3
      - name: 'Setup Node.js'
        uses: actions/setup-node@v2
        with:
          node-version: '20'  # Specify the required Node.js version  
      - name: 'Setup Terraform'
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest      
      - id: envvars
        name: Set environment variables based on deployment environment
        run: |
            if [ "${{ inputs.environment }}" = "prod" ]; then
              echo "BACKEND_STORAGE_ACCOUNT=${{ secrets.BACKEND_STORAGE_ACCOUNT }}" >> "$GITHUB_ENV"
              echo "BACKEND_RESOURCE_GROUP=${{ secrets.BACKEND_RESOURCE_GROUP }}" >> "$GITHUB_ENV"
            elif [ "${{ inputs.environment }}" = "uat" ]; then
              echo "BACKEND_STORAGE_ACCOUNT=${{ secrets.BACKEND_STORAGE_ACCOUNT }}" >> "$GITHUB_ENV"
              echo "BACKEND_RESOURCE_GROUP=${{ secrets.BACKEND_RESOURCE_GROUP }}" >> "$GITHUB_ENV"
            else
              echo "BACKEND_STORAGE_ACCOUNT=${{ secrets.BACKEND_STORAGE_ACCOUNT }}" >> "$GITHUB_ENV"
              echo "BACKEND_RESOURCE_GROUP=${{ secrets.BACKEND_RESOURCE_GROUP }}" >> "$GITHUB_ENV"
            fi

      - name: 'Terraform Initialize - Load Balancer'
        run: terraform init -backend-config="resource_group_name=$BACKEND_RESOURCE_GROUP" -backend-config="storage_account_name=$BACKEND_STORAGE_ACCOUNT" -backend-config="container_name=terraform-state" -backend-config="key=${{ inputs.environment }}-${{ inputs.purpose }}-terraform.tfstate" -input=false
        env:
          TF_VAR_requesttype:                  '${{inputs.requestType}}'
          TF_VAR_location:                     '${{inputs.location}}'
          TF_VAR_environment:                  '${{inputs.environment}}'
          TF_VAR_purpose:                      '${{inputs.purpose}}'
          TF_VAR_purpose_rg:                   '${{inputs.purposeRG}}'
          TF_VAR_subnetname:                   '${{inputs.subnetname}}'
          TF_VAR_sku_name:                     '${{inputs.sku_name}}'
          TF_VAR_private_ip_address:           '${{inputs.private_ip_address}}'
          TF_VAR_nic_names:                    '${{inputs.nic_names}}'
          TF_VAR_lb_probe_protocol:            '${{inputs.lb_probe_protocol}}'
          TF_VAR_lb_probe_port:                '${{inputs.lb_probe_port}}'
          TF_VAR_lb_rule_tcp_protocol:         '${{inputs.lb_rule_tcp_protocol}}'
          TF_VAR_lb_rule_tcp_frontend_port:    '${{inputs.lb_rule_tcp_frontend_port}}'
          TF_VAR_lb_rule_tcp_backend_port:     '${{inputs.lb_rule_tcp_backend_port}}'
          TF_VAR_lb_rule_https_protocol:       '${{inputs.lb_rule_https_protocol}}'
          TF_VAR_lb_rule_https_frontend_port:  '${{inputs.lb_rule_https_frontend_port}}'



      - name: 'Terraform Plan - Load Balancer'
        if: ${{ inputs.requestType == 'Create (with New RG)' || inputs.requestType == 'Create (with Existing RG)' }}
        run: terraform plan
        env:
          TF_VAR_requesttype:                  '${{inputs.requestType}}'
          TF_VAR_location:                     '${{inputs.location}}'
          TF_VAR_environment:                  '${{inputs.environment}}'
          TF_VAR_purpose:                      '${{inputs.purpose}}'
          TF_VAR_purpose_rg:                   '${{inputs.purposeRG}}'
          TF_VAR_subnetname:                   '${{inputs.subnetname}}'
          TF_VAR_sku_name:                     '${{inputs.sku_name}}'
          TF_VAR_private_ip_address:           '${{inputs.private_ip_address}}'
          TF_VAR_nic_names:                    '${{inputs.nic_names}}'
          TF_VAR_lb_probe_protocol:            '${{inputs.lb_probe_protocol}}'
          TF_VAR_lb_probe_port:                '${{inputs.lb_probe_port}}'
          TF_VAR_lb_rule_tcp_protocol:         '${{inputs.lb_rule_tcp_protocol}}'
          TF_VAR_lb_rule_tcp_frontend_port:    '${{inputs.lb_rule_tcp_frontend_port}}'
          TF_VAR_lb_rule_tcp_backend_port:     '${{inputs.lb_rule_tcp_backend_port}}'
          TF_VAR_lb_rule_https_protocol:       '${{inputs.lb_rule_https_protocol}}'
          TF_VAR_lb_rule_https_frontend_port:  '${{inputs.lb_rule_https_frontend_port}}'
      - name: 'Terraform Apply - Load Balancer'
        if: ${{ inputs.requestType == 'Create (with New RG)' || inputs.requestType == 'Create (with Existing RG)' }}
        run: terraform apply -auto-approve
        env:
          TF_VAR_requesttype:                  '${{inputs.requestType}}'
          TF_VAR_location:                     '${{inputs.location}}'
          TF_VAR_environment:                  '${{inputs.environment}}'
          TF_VAR_purpose:                      '${{inputs.purpose}}'
          TF_VAR_purpose_rg:                   '${{inputs.purposeRG}}'
          TF_VAR_subnetname:                   '${{inputs.subnetname}}'
          TF_VAR_sku_name:                     '${{inputs.sku_name}}'
          TF_VAR_private_ip_address:           '${{inputs.private_ip_address}}'
          TF_VAR_nic_names:                    '${{inputs.nic_names}}'
          TF_VAR_lb_probe_protocol:            '${{inputs.lb_probe_protocol}}'
          TF_VAR_lb_probe_port:                '${{inputs.lb_probe_port}}'
          TF_VAR_lb_rule_tcp_protocol:         '${{inputs.lb_rule_tcp_protocol}}'
          TF_VAR_lb_rule_tcp_frontend_port:    '${{inputs.lb_rule_tcp_frontend_port}}'
          TF_VAR_lb_rule_tcp_backend_port:     '${{inputs.lb_rule_tcp_backend_port}}'
          TF_VAR_lb_rule_https_protocol:       '${{inputs.lb_rule_https_protocol}}'
          TF_VAR_lb_rule_https_frontend_port:  '${{inputs.lb_rule_https_frontend_port}}'
      - name: 'Terraform Remove - Load Balancer'
        if: ${{ inputs.requestType == 'Remove' }}
        run: terraform destroy -auto-approve
        env:
          TF_VAR_requesttype:                  '${{inputs.requestType}}'
          TF_VAR_location:                     '${{inputs.location}}'
          TF_VAR_environment:                  '${{inputs.environment}}'
          TF_VAR_purpose:                      '${{inputs.purpose}}'
          TF_VAR_purpose_rg:                   '${{inputs.purposeRG}}'
          TF_VAR_subnetname:                   '${{inputs.subnetname}}'
          TF_VAR_sku_name:                     '${{inputs.sku_name}}'
          TF_VAR_private_ip_address:           '${{inputs.private_ip_address}}'
          TF_VAR_nic_names:                    '${{inputs.nic_names}}'
          TF_VAR_lb_probe_protocol:            '${{inputs.lb_probe_protocol}}'
          TF_VAR_lb_probe_port:                '${{inputs.lb_probe_port}}'
          TF_VAR_lb_rule_tcp_protocol:         '${{inputs.lb_rule_tcp_protocol}}'
          TF_VAR_lb_rule_tcp_frontend_port:    '${{inputs.lb_rule_tcp_frontend_port}}'
          TF_VAR_lb_rule_tcp_backend_port:     '${{inputs.lb_rule_tcp_backend_port}}'
          TF_VAR_lb_rule_https_protocol:       '${{inputs.lb_rule_https_protocol}}'
          TF_VAR_lb_rule_https_frontend_port:  '${{inputs.lb_rule_https_frontend_port}}'
