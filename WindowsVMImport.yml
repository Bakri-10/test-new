name: "zWindows VM Import (Call)"
run-name: "VM Import: ${{ github.actor }} - ${{ inputs.vmName }}"
on:
  workflow_call:
    inputs:
      environment:
        type: string
        required: true
        description: "Deployment environment (DEV, UAT, QA, PROD)"
      location:
        type: string
        required: true
        description: "Location of the VM resources"
      vmName:
        type: string
        required: true
        description: "Name of the VM to import"
      resourceGroupName:
        type: string
        required: true
        description: "Resource group containing the VM"
      nicCount:
        type: string
        required: false
        description: "Number of network interfaces attached to the VM"
        default: "1"
      nicNames:
        type: string
        required: false
        description: "For single NIC: enter name directly. For multiple NICs: JSON array"
        default: ""
      osDiskName:
        type: string
        required: false
        description: "Name of the OS disk"
        default: ""
      dataDiskCount:
        type: string
        required: false
        description: "Number of data disks attached to the VM"
        default: "0"
      dataDiskNames:
        type: string
        required: false
        description: "JSON array of data disk names (e.g. '[\"disk1\",\"disk2\"]')"
        default: ""
      generateOnly:
        type: boolean
        required: false
        description: "Generate import commands without executing them"
        default: false
    secrets:
      ARM_CLIENT_ID:
        required: true
      ARM_CLIENT_SECRET:
        required: true
      ARM_SUBSCRIPTION_ID:
        required: true
      ARM_TENANT_ID:
        required: true
      BACKEND_STORAGE_ACCOUNT:
        required: true
      BACKEND_RESOURCE_GROUP:
        required: true

permissions:
  contents: read

jobs:
  wvm-import:
    name: "VM Import Operations"
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ROOT_PATH: "Azure/windows-vm/import"
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    defaults:
      run:
        shell: bash
    steps:
    - uses: actions/checkout@v4

    - name: Parse Resource Names
      id: parse_names
      run: |
        # Process NIC names
        if [ ! -z "${{ inputs.nicNames }}" ]; then
          # Check if the input is already a valid JSON array
          if echo "${{ inputs.nicNames }}" | jq empty > /dev/null 2>&1; then
            echo "nic_names=${{ inputs.nicNames }}" >> $GITHUB_ENV
            echo "Using provided NIC names JSON array"
          else
            # For a single NIC, convert to JSON array
            if [ "${{ inputs.nicCount }}" -eq "1" ]; then
              echo "nic_names=[\"${{ inputs.nicNames }}\"]" >> $GITHUB_ENV
              echo "Converted single NIC name to JSON array: ${{ inputs.nicNames }}"
            else
              echo "ERROR: NIC names format is invalid"
              exit 1
            fi
          fi
        fi

        # Parse data disk names if provided
        if [ ! -z "${{ inputs.dataDiskNames }}" ]; then
          echo "data_disk_names=${{ inputs.dataDiskNames }}" >> $GITHUB_ENV
        fi

    - name: Az login
      uses: azure/login@v2
      with:
        creds: '{"clientId":"${{ secrets.ARM_CLIENT_ID }}","clientSecret":"${{ secrets.ARM_CLIENT_SECRET }}","subscriptionId":"${{ secrets.ARM_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.ARM_TENANT_ID }}"}'
        enable-AzPSSession: true

    - name: "Terraform Initialize"
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_version: latest
        tf_actions_subcommand: "init"
        tf_actions_working_dir: ${{ env.ROOT_PATH }}
        tf_actions_comment: true
      env:
        TF_VAR_location: "${{ inputs.location }}"
        TF_VAR_vm_name: "${{ inputs.vmName }}"
        TF_VAR_resource_group_name: "${{ inputs.resourceGroupName }}"
        TF_VAR_nic_count: "${{ inputs.nicCount }}"
        TF_VAR_nic_names: ${{ env.nic_names }}
        TF_VAR_os_disk_name: "${{ inputs.osDiskName }}"
        TF_VAR_data_disk_count: "${{ inputs.dataDiskCount }}"
        TF_VAR_data_disk_names: ${{ env.data_disk_names }}
        TF_CLI_ARGS_init: '-backend-config="resource_group_name=${{ secrets.BACKEND_RESOURCE_GROUP }}" -backend-config="storage_account_name=${{ secrets.BACKEND_STORAGE_ACCOUNT }}" -backend-config="container_name=terraform-state" -backend-config="key=${{ inputs.environment }}-${{ inputs.vmName }}-import.tfstate"'

    - name: "Terraform Plan - Generate Import Commands"
      id: terraform_plan
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_version: latest
        tf_actions_subcommand: "plan"
        tf_actions_working_dir: ${{ env.ROOT_PATH }}
        tf_actions_comment: true
      env:
        TF_VAR_location: "${{ inputs.location }}"
        TF_VAR_vm_name: "${{ inputs.vmName }}"
        TF_VAR_resource_group_name: "${{ inputs.resourceGroupName }}"
        TF_VAR_nic_count: "${{ inputs.nicCount }}"
        TF_VAR_nic_names: ${{ env.nic_names }}
        TF_VAR_os_disk_name: "${{ inputs.osDiskName }}"
        TF_VAR_data_disk_count: "${{ inputs.dataDiskCount }}"
        TF_VAR_data_disk_names: ${{ env.data_disk_names }}

    - name: "Extract Import Commands"
      id: extract_commands
      run: |
        cd ${{ env.ROOT_PATH }}
        echo "Generating import commands..."

        # Generate commands for VM, NICs, disks, and attachments
        terraform output -json vm_import_command | jq -r '.' > import_commands.txt
        terraform output -json nic_import_commands | jq -r '.[]' >> import_commands.txt
        terraform output -json data_disk_import_commands | jq -r '.[]' >> import_commands.txt
        terraform output -json data_disk_attachment_import_commands | jq -r '.[]' >> import_commands.txt

        echo "Import commands:"
        cat import_commands.txt

        # Set output using Environment Files approach
        echo "commands_file=import_commands.txt" >> $GITHUB_OUTPUT

    - name: "Execute Import Commands"
      if: ${{ !inputs.generateOnly }}
      run: |
        cd ${{ env.ROOT_PATH }}
        echo "Executing import commands..."

        # Execute each import command one by one
        while IFS= read -r cmd; do
          echo "Executing: $cmd"
          eval "$cmd"
          
          # If the command fails, wait and retry once
          if [ $? -ne 0 ]; then
            echo "Command failed, retrying after 10 seconds..."
            sleep 10
            eval "$cmd"
          fi
        done < import_commands.txt

        echo "Import completed!"
      env:
        TF_VAR_location: "${{ inputs.location }}"
        TF_VAR_vm_name: "${{ inputs.vmName }}"
        TF_VAR_resource_group_name: "${{ inputs.resourceGroupName }}"
        TF_VAR_nic_count: "${{ inputs.nicCount }}"
        TF_VAR_nic_names: ${{ env.nic_names }}
        TF_VAR_os_disk_name: "${{ inputs.osDiskName }}"
        TF_VAR_data_disk_count: "${{ inputs.dataDiskCount }}"
        TF_VAR_data_disk_names: ${{ env.data_disk_names }}

    - name: "Generate Terraform State"
      if: ${{ !inputs.generateOnly && success() }}
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_version: latest
        tf_actions_subcommand: "plan"
        tf_actions_working_dir: ${{ env.ROOT_PATH }}
        tf_actions_comment: true
        tf_actions_cli_options: "-out=tfplan"
      env:
        TF_VAR_location: "${{ inputs.location }}"
        TF_VAR_vm_name: "${{ inputs.vmName }}"
        TF_VAR_resource_group_name: "${{ inputs.resourceGroupName }}"
        TF_VAR_nic_count: "${{ inputs.nicCount }}"
        TF_VAR_nic_names: ${{ env.nic_names }}
        TF_VAR_os_disk_name: "${{ inputs.osDiskName }}"
        TF_VAR_data_disk_count: "${{ inputs.dataDiskCount }}"
        TF_VAR_data_disk_names: ${{ env.data_disk_names }}

    - name: "Create import summary"
      run: |
        echo "## VM Import Summary" > import_summary.md
        echo "" >> import_summary.md
        echo "| Resource Type | Name | Status |" >> import_summary.md
        echo "|--------------|------|--------|" >> import_summary.md
        echo "| Virtual Machine | ${{ inputs.vmName }} | Imported |" >> import_summary.md

        # Add NICs to summary
        if [ ! -z "${{ inputs.nicNames }}" ]; then
          echo "${{ env.nic_names }}" | jq -r '.[]' | while read -r nic_name; do
            echo "| Network Interface | $nic_name | Imported |" >> import_summary.md
          done
        else
          for i in $(seq 1 ${{ inputs.nicCount }}); do
            echo "| Network Interface | ${{ inputs.vmName }}-nic-$(printf "%02d" $i) | Imported |" >> import_summary.md
          done
        fi

        # Add OS disk to summary
        if [ ! -z "${{ inputs.osDiskName }}" ]; then
          echo "| OS Disk | ${{ inputs.osDiskName }} | Imported |" >> import_summary.md
        else
          echo "| OS Disk | ${{ inputs.vmName }}-disk-os | Imported |" >> import_summary.md
        fi

        # Add data disks to summary
        if [ ! -z "${{ inputs.dataDiskNames }}" ]; then
          echo "${{ env.data_disk_names }}" | jq -r '.[]' | while read -r disk_name; do
            echo "| Data Disk | $disk_name | Imported |" >> import_summary.md
          done
        else
          for i in $(seq 0 $((${{ inputs.dataDiskCount }}-1))); do
            echo "| Data Disk | ${{ inputs.vmName }}-data_disk-$i | Imported |" >> import_summary.md
          done
        fi

        echo "" >> import_summary.md
        echo "Terraform state file: ${{ inputs.environment }}-${{ inputs.vmName }}-import.tfstate" >> import_summary.md

        cat import_summary.md

    - name: "Upload Import Summary"
      uses: actions/upload-artifact@v4
      with:
        name: import-summary
        path: import_summary.md
