name: "- Deploy Windows VM Import"
run-name: "Windows VM Import - ${{ inputs.environment }} VM: ${{ inputs.vmName }}"
on:
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        required: true
        description: Environment
        options:
        - DEV
        - UAT
        - QA
        - PROD
      location:
        type: choice
        required: true
        description: Deployment Location
        options:
        - eastus2
        - uksouth
        - centralus
        - ukwest
      vmName:
        type: string
        required: true
        description: Name of the VM to import
      resourceGroupName:
        type: string
        required: true
        description: Resource group containing the VM
      nicCount:
        type: string
        required: false
        description: Number of network interfaces (default 1)
        default: "1"
      nicNames:
        type: string
        required: false
        description: "For single NIC: enter name directly. For multiple NICs: JSON array (e.g. '[\"nic1\",\"nic2\"]')"
        default: ""
      osDiskName:
        type: string
        required: false
        description: Name of the OS disk
        default: ""
      dataDiskCount:
        type: string
        required: false
        description: Number of data disks (default 0)
        default: "0"
      dataDiskNames:
        type: string
        required: false
        description: JSON array of data disk names (e.g. '["disk1","disk2"]')
        default: ""
      generateOnly:
        type: boolean
        required: false
        description: Generate import commands without executing them
        default: false

jobs:
  validate-inputs:
    runs-on: ubuntu-latest
    steps:
    - name: Validate inputs
      id: validate
      run: |
        if [[ -z "${{ inputs.vmName }}" ]]; then
          echo "::error::VM Name is required"
          exit 1
        fi

        if [[ -z "${{ inputs.resourceGroupName }}" ]]; then
          echo "::error::Resource Group Name is required"
          exit 1
        fi

        if [[ "${{ inputs.nicCount }}" -lt 1 ]]; then
          echo "::error::NIC Count must be at least 1"
          exit 1
        fi

        if [[ "${{ inputs.dataDiskCount }}" -lt 0 ]]; then
          echo "::error::Data Disk Count must be 0 or greater"
          exit 1
        fi

        # Process and validate NIC names
        if [[ ! -z "${{ inputs.nicNames }}" ]]; then
          # If NIC count is 1 and the input doesn't start with [, treat as a simple string
          if [[ "${{ inputs.nicCount }}" -eq 1 ]] && [[ ! "${{ inputs.nicNames }}" =~ ^\[ ]]; then
            # Format as a proper JSON array for later processing
            processed_nic_names="[\"${{ inputs.nicNames }}\"]"
            echo "nic_names_json=$processed_nic_names" >> $GITHUB_ENV
            echo "Single NIC name provided: ${{ inputs.nicNames }}"
          else
            # Try to parse as JSON array
            if ! echo "${{ inputs.nicNames }}" | jq empty; then
              echo "::error::NIC names must be a valid JSON array format '[\"nic1\",\"nic2\"]'"
              exit 1
            fi
            
            nic_count=$(echo "${{ inputs.nicNames }}" | jq length)
            if [[ $nic_count -ne ${{ inputs.nicCount }} ]]; then
              echo "::error::Number of NIC names ($nic_count) does not match NIC count (${{ inputs.nicCount }})"
              exit 1
            fi
            
            echo "nic_names_json=${{ inputs.nicNames }}" >> $GITHUB_ENV
          fi
        fi

        # Validate data disk names JSON if provided
        if [[ ! -z "${{ inputs.dataDiskNames }}" ]]; then
          if ! echo "${{ inputs.dataDiskNames }}" | jq empty; then
            echo "::error::Data disk names must be a valid JSON array"
            exit 1
          fi
          
          disk_count=$(echo "${{ inputs.dataDiskNames }}" | jq length)
          if [[ $disk_count -ne ${{ inputs.dataDiskCount }} ]]; then
            echo "::error::Number of data disk names ($disk_count) does not match data disk count (${{ inputs.dataDiskCount }})"
            exit 1
          fi
        fi

        echo "All validations passed!"

  windows_vm_import:
    needs: validate-inputs
    name: "VM Import Operation"
    uses: ./.github/workflows/WindowsVMImport.yml
    secrets:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      BACKEND_STORAGE_ACCOUNT: ${{ secrets.BACKEND_STORAGE_ACCOUNT }}
      BACKEND_RESOURCE_GROUP: ${{ secrets.BACKEND_RESOURCE_GROUP }}
    with:
      environment: ${{ inputs.environment }}
      location: ${{ inputs.location }}
      vmName: ${{ inputs.vmName }}
      resourceGroupName: ${{ inputs.resourceGroupName }}
      nicCount: ${{ inputs.nicCount }}
      nicNames: ${{ env.nic_names_json || inputs.nicNames }}
      osDiskName: ${{ inputs.osDiskName }}
      dataDiskCount: ${{ inputs.dataDiskCount }}
      dataDiskNames: ${{ inputs.dataDiskNames }}
      generateOnly: ${{ inputs.generateOnly }}
